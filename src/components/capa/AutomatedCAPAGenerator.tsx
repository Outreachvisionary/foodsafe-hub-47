
import React, { useState, useEffect } from 'react';
import { Card, CardContent } from '@/components/ui/card';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Loader2, AlertCircle } from 'lucide-react';
import AutoGeneratedCAPA from './AutoGeneratedCAPA';
import { CAPASource } from '@/types/enums';

interface AutomatedCAPAGeneratorProps {
  onCAPACreated: (data: any) => void;
}

const AutomatedCAPAGenerator: React.FC<AutomatedCAPAGeneratorProps> = ({ onCAPACreated }) => {
  const [loading, setLoading] = useState(true);
  const [detectedIssues, setDetectedIssues] = useState<any[]>([]);
  
  useEffect(() => {
    // Simulate API call to get potential issues
    const fetchPotentialIssues = async () => {
      setLoading(true);
      
      // Mock data for demonstration
      const mockIssues = [
        {
          id: 'issue-1',
          title: 'High bacterial count detected in raw material batch',
          description: 'Lab results show bacterial levels exceeding specifications in raw material batch RM-2023-4567.',
          source: CAPASource.Other,
          sourceId: 'QC-LAB-2023-045',
          date: new Date().toISOString(),
          severity: 'Critical',
          confidence: 0.95
        },
        {
          id: 'issue-2',
          title: 'Recurring temperature deviation in cold storage',
          description: 'System has detected 5 instances of temperature going above acceptable range in cold storage unit CS-03 over the past week.',
          source: CAPASource.Management_Review,
          sourceId: 'HACCP-MON-2023-078',
          date: new Date().toISOString(),
          severity: 'Major',
          confidence: 0.87
        }
        // Add more mock issues as needed
      ];
      
      // Simulate delay
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      setDetectedIssues(mockIssues);
      setLoading(false);
    };
    
    fetchPotentialIssues();
  }, []);
  
  const handleAccept = (issueData: any) => {
    onCAPACreated(issueData);
  };
  
  const handleReject = (issueId: string) => {
    setDetectedIssues(prev => prev.filter(issue => issue.id !== issueId));
  };
  
  if (loading) {
    return (
      <Card>
        <CardContent className="py-8 flex items-center justify-center">
          <div className="text-center">
            <Loader2 className="h-8 w-8 animate-spin mx-auto mb-2 text-primary" />
            <p className="text-lg font-medium">Analyzing quality data for potential issues...</p>
          </div>
        </CardContent>
      </Card>
    );
  }
  
  if (detectedIssues.length === 0) {
    return (
      <Card>
        <CardContent className="py-8">
          <div className="text-center">
            <AlertCircle className="h-8 w-8 mx-auto mb-2 text-green-500" />
            <p className="text-lg font-medium">No quality issues requiring CAPA were detected</p>
            <p className="text-muted-foreground">
              The system will automatically notify you when potential issues are found.
            </p>
          </div>
        </CardContent>
      </Card>
    );
  }
  
  return (
    <Tabs defaultValue="all">
      <div className="mb-4 flex items-center justify-between">
        <TabsList>
          <TabsTrigger value="all">All Issues ({detectedIssues.length})</TabsTrigger>
          <TabsTrigger value="critical">Critical ({detectedIssues.filter(i => i.severity === 'Critical').length})</TabsTrigger>
          <TabsTrigger value="major">Major ({detectedIssues.filter(i => i.severity === 'Major').length})</TabsTrigger>
        </TabsList>
      </div>
      
      <TabsContent value="all" className="space-y-4">
        {detectedIssues.map(issue => (
          <AutoGeneratedCAPA 
            key={issue.id}
            sourceData={issue}
            onAccept={() => handleAccept(issue)}
            onReject={() => handleReject(issue.id)}
          />
        ))}
      </TabsContent>
      
      <TabsContent value="critical" className="space-y-4">
        {detectedIssues
          .filter(issue => issue.severity === 'Critical')
          .map(issue => (
            <AutoGeneratedCAPA 
              key={issue.id}
              sourceData={issue}
              onAccept={() => handleAccept(issue)}
              onReject={() => handleReject(issue.id)}
            />
        ))}
      </TabsContent>
      
      <TabsContent value="major" className="space-y-4">
        {detectedIssues
          .filter(issue => issue.severity === 'Major')
          .map(issue => (
            <AutoGeneratedCAPA 
              key={issue.id}
              sourceData={issue}
              onAccept={() => handleAccept(issue)}
              onReject={() => handleReject(issue.id)}
            />
        ))}
      </TabsContent>
    </Tabs>
  );
};

export default AutomatedCAPAGenerator;
