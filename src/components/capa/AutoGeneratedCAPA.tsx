
import React from 'react';
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { 
  AlertCircle, 
  Calendar, 
  CheckCircle2, 
  Clock, 
  FileText, 
  ShieldAlert,
  Beaker,
  MessageCircle,
  AlertTriangle
} from 'lucide-react';
import { useToast } from '@/hooks/use-toast';
import { CAPASource, CAPAStatus } from '@/types/capa';

interface SourceData {
  id: string;
  title: string;
  description: string;
  source: CAPASource;
  sourceId: string;
  date: string;
  severity?: string;
  confidence?: number;
}

interface AutoGeneratedCAPAProps {
  sourceData: SourceData;
  onAccept: (data: any) => void;
  onReject: () => void;
}

const AutoGeneratedCAPA: React.FC<AutoGeneratedCAPAProps> = ({
  sourceData,
  onAccept,
  onReject
}) => {
  const { toast } = useToast();

  const getPriorityFromSeverity = (severity?: string) => {
    if (!severity) return 'Medium';
    
    switch (severity.toLowerCase()) {
      case 'critical':
        return 'Critical';
      case 'major':
        return 'High';
      case 'minor':
        return 'Medium';
      default:
        return 'Low';
    }
  };

  const getSeverityBadge = (severity?: string) => {
    if (!severity) {
      return (
        <Badge className="bg-gray-100 text-gray-800">
          Unknown
        </Badge>
      );
    }
    
    switch (severity.toLowerCase()) {
      case 'critical':
        return (
          <Badge className="bg-red-100 text-red-800">
            Critical
          </Badge>
        );
      case 'major':
        return (
          <Badge className="bg-amber-100 text-amber-800">
            Major
          </Badge>
        );
      case 'minor':
        return (
          <Badge className="bg-yellow-100 text-yellow-800">
            Minor
          </Badge>
        );
      default:
        return (
          <Badge className="bg-gray-100 text-gray-800">
            {severity}
          </Badge>
        );
    }
  };

  const handleAccept = async () => {
    try {
      // Calculate suggested due date (14 days from now)
      const dueDate = new Date();
      dueDate.setDate(dueDate.getDate() + 14);
      
      const now = new Date().toISOString();
      
      // Prepare CAPA data for creation
      const capaData = {
        title: sourceData.title,
        description: sourceData.description,
        source: sourceData.source,
        source_id: sourceData.sourceId,
        priority: getPriorityFromSeverity(sourceData.severity),
        due_date: dueDate.toISOString().split('T')[0],
        status: CAPAStatus.Open,
        assigned_to: 'Quality Manager', // Default assignment
        department: 'Quality', // Default department
        root_cause: '',
        corrective_action: '',
        preventive_action: '',
        created_at: now,
        created_by: 'System',
        fsma204_compliant: true,
      };
      
      // In a real application, we would call the API to create the CAPA
      // const createdCAPA = await createCAPA(capaData);
      
      // For now, we'll simulate the creation
      const createdCAPA = {
        id: `CAPA-${Date.now()}`,
        ...capaData
      };
      
      onAccept(createdCAPA);
      toast({
        title: "CAPA Created",
        description: "CAPA created successfully from detected issue"
      });
    } catch (error) {
      console.error('Error creating CAPA:', error);
      toast({
        title: "Error",
        description: "Failed to create CAPA from detected issue",
        variant: "destructive"
      });
    }
  };

  const getSourceIcon = (source: CAPASource) => {
    switch (source) {
      case CAPASource.Audit:
        return <FileText className="h-5 w-5 text-blue-600" />;
      case CAPASource.Complaint:
        return <MessageCircle className="h-5 w-5 text-amber-600" />;
      case CAPASource.Non_Conformance:
        return <AlertTriangle className="h-5 w-5 text-purple-600" />;
      default:
        return <FileText className="h-5 w-5 text-gray-600" />;
    }
  };

  return (
    <Card>
      <CardHeader>
        <div className="flex justify-between items-start">
          <div className="flex items-center gap-2">
            {getSourceIcon(sourceData.source)}
            <div>
              <CardTitle>Auto-Generated CAPA Recommendation</CardTitle>
              <CardDescription>Based on a critical finding in {sourceData.source.toString().replace(/_/g, ' ')}</CardDescription>
            </div>
          </div>
          {getSeverityBadge(sourceData.severity)}
        </div>
      </CardHeader>
      <CardContent>
        <div className="space-y-4">
          <div>
            <h3 className="text-sm font-medium text-gray-500">Source</h3>
            <p className="mt-1">
              {sourceData.source.toString().replace(/_/g, ' ')} ({sourceData.sourceId})
            </p>
          </div>
          
          <div>
            <h3 className="text-sm font-medium text-gray-500">Issue Title</h3>
            <p className="mt-1 font-medium">{sourceData.title}</p>
          </div>
          
          <div>
            <h3 className="text-sm font-medium text-gray-500">Description</h3>
            <p className="mt-1">{sourceData.description}</p>
          </div>
          
          <div className="flex justify-between">
            <div>
              <h3 className="text-sm font-medium text-gray-500">Date Identified</h3>
              <p className="mt-1 flex items-center">
                <Calendar className="h-3.5 w-3.5 text-gray-500 mr-1.5" />
                {new Date(sourceData.date).toLocaleDateString()}
              </p>
            </div>
            
            <div>
              <h3 className="text-sm font-medium text-gray-500">Suggested Priority</h3>
              <p className="mt-1">
                {getSeverityBadge(sourceData.severity)}
              </p>
            </div>
            
            <div>
              <h3 className="text-sm font-medium text-gray-500">Suggested Due Date</h3>
              <p className="mt-1 flex items-center">
                <Clock className="h-3.5 w-3.5 text-gray-500 mr-1.5" />
                {new Date(new Date().setDate(new Date().getDate() + 14)).toLocaleDateString()}
              </p>
            </div>
          </div>
          
          <div className="bg-amber-50 p-4 rounded-md border border-amber-100">
            <h4 className="font-medium flex items-center text-amber-800">
              <AlertCircle className="h-5 w-5 mr-2" />
              AI-Suggested Actions
            </h4>
            <p className="text-sm text-amber-700 mt-1">
              Based on the severity and type of issue, the system recommends creating a CAPA to address 
              this finding. You can accept to create a CAPA with pre-populated information or reject
              if you prefer to handle this differently.
            </p>
            {sourceData.confidence && (
              <p className="text-sm text-amber-700 mt-2">
                Confidence: {Math.round(sourceData.confidence * 100)}%
              </p>
            )}
          </div>
        </div>
      </CardContent>
      <CardFooter className="flex justify-end space-x-2 border-t pt-4">
        <Button variant="outline" onClick={onReject}>
          Reject
        </Button>
        <Button onClick={handleAccept}>
          <CheckCircle2 className="h-4 w-4 mr-2" />
          Accept & Create CAPA
        </Button>
      </CardFooter>
    </Card>
  );
};

export default AutoGeneratedCAPA;
